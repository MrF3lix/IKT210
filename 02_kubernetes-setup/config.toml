TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384, TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305, TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256, TLS_RSA_WITH_AES_128_CBC_SHA, TLS_RSA_WITH_AES_128_GCM_SHA256, TLS_RSA_WITH_AES_256_CBC_SHA, TLS_RSA_WITH_AES_256_GCM_SHA384.
                Insecure values: TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256, TLS_ECDHE_ECDSA_WITH_RC4_128_SHA, TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA, TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256, TLS_ECDHE_RSA_WITH_RC4_128_SHA, TLS_RSA_WITH_3DES_EDE_CBC_SHA, TLS_RSA_WITH_AES_128_CBC_SHA256, TLS_RSA_WITH_RC4_128_SHA. (DEPRECATED: This parameter should be set via the config file specified by the Kubelet's --config flag. See https://kubernetes.io/docs/tasks/administer-cluster/kubelet-config-file/ for more information.)
      --tls-min-version string                                   Minimum TLS version supported. Possible values: VersionTLS10, VersionTLS11, VersionTLS12, VersionTLS13 (DEPRECATED: This parameter should be set via the config file specified by the Kubelet's --config flag. See https://kubernetes.io/docs/tasks/administer-cluster/kubelet-config-file/ for more information.)
      --tls-private-key-file string                              File containing x509 private key matching --tls-cert-file. (DEPRECATED: This parameter should be set via the config file specified by the Kubelet's --config flag. See https://kubernetes.io/docs/tasks/administer-cluster/kubelet-config-file/ for more information.)
      --topology-manager-policy string                           Topology Manager policy to use. Possible values: 'none', 'best-effort', 'restricted', 'single-numa-node'. (default "none") (DEPRECATED: This parameter should be set via the config file specified by the Kubelet's --config flag. See https://kubernetes.io/docs/tasks/administer-cluster/kubelet-config-file/ for more information.)
      --topology-manager-scope string                            Scope to which topology hints applied. Topology Manager collects hints from Hint Providers and applies them to defined scope to ensure the pod admission. Possible values: 'container', 'pod'. (default "container") (DEPRECATED: This parameter should be set via the config file specified by the Kubelet's --config flag. See https://kubernetes.io/docs/tasks/administer-cluster/kubelet-config-file/ for more information.)
  -v, --v Level                                                  number for the log level verbosity
      --version version[=true]                                   Print version information and quit
      --vmodule pattern=N,...                                    comma-separated list of pattern=N settings for file-filtered logging (only works for text log format)
      --volume-plugin-dir string                                 The full path of the directory in which to search for additional third party volume plugins (default "/usr/libexec/kubernetes/kubelet-plugins/volume/exec/") (DEPRECATED: This parameter should be set via the config file specified by the Kubelet's --config flag. See https://kubernetes.io/docs/tasks/administer-cluster/kubelet-config-file/ for more information.)
      --volume-stats-agg-period duration                         Specifies interval for kubelet to calculate and cache the volume disk usage for all pods and volumes.  To disable volume calculations, set to a negative number. (default 1m0s) (DEPRECATED: This parameter should be set via the config file specified by the Kubelet's --config flag. See https://kubernetes.io/docs/tasks/administer-cluster/kubelet-config-file/ for more information.)

Error: failed to construct kubelet dependencies: error reading /var/lib/kubelet/pki/kubelet.key, certificate and key must be supplied as a pair
felixmsa@ikt210-g-22h-lab-group-13-node1:~$ kubectl
kubectl controls the Kubernetes cluster manager.

 Find more information at: https://kubernetes.io/docs/reference/kubectl/overview/

Basic Commands (Beginner):
  create          Create a resource from a file or from stdin
  expose          Take a replication controller, service, deployment or pod and expose it as a new Kubernetes service
  run             Run a particular image on the cluster
  set             Set specific features on objects

Basic Commands (Intermediate):
  explain         Get documentation for a resource
  get             Display one or many resources
  edit            Edit a resource on the server
  delete          Delete resources by file names, stdin, resources and names, or by resources and label selector

Deploy Commands:
  rollout         Manage the rollout of a resource
  scale           Set a new size for a deployment, replica set, or replication controller
  autoscale       Auto-scale a deployment, replica set, stateful set, or replication controller

Cluster Management Commands:
  certificate     Modify certificate resources.
  cluster-info    Display cluster information
  top             Display resource (CPU/memory) usage
  cordon          Mark node as unschedulable
  uncordon        Mark node as schedulable
  drain           Drain node in preparation for maintenance
  taint           Update the taints on one or more nodes

Troubleshooting and Debugging Commands:
  describe        Show details of a specific resource or group of resources
  logs            Print the logs for a container in a pod
  attach          Attach to a running container
  exec            Execute a command in a container
  port-forward    Forward one or more local ports to a pod
  proxy           Run a proxy to the Kubernetes API server
  cp              Copy files and directories to and from containers
  auth            Inspect authorization
  debug           Create debugging sessions for troubleshooting workloads and nodes

Advanced Commands:
  diff            Diff the live version against a would-be applied version
  apply           Apply a configuration to a resource by file name or stdin
  patch           Update fields of a resource
  replace         Replace a resource by file name or stdin
  wait            Experimental: Wait for a specific condition on one or many resources
  kustomize       Build a kustomization target from a directory or URL.

Settings Commands:
  label           Update the labels on a resource
  annotate        Update the annotations on a resource
  completion      Output shell completion code for the specified shell (bash, zsh or fish)

Other Commands:
  alpha           Commands for features in alpha
  api-resources   Print the supported API resources on the server
  api-versions    Print the supported API versions on the server, in the form of "group/version"
  config          Modify kubeconfig files
  plugin          Provides utilities for interacting with plugins
  version         Print the client and server version information

Usage:
  kubectl [flags] [options]

Use "kubectl <command> --help" for more information about a given command.
Use "kubectl options" for a list of global command-line options (applies to all commands).
felixmsa@ikt210-g-22h-lab-group-13-node1:~$ kubeadm


    ┌──────────────────────────────────────────────────────────┐
    │ KUBEADM                                                  │
    │ Easily bootstrap a secure Kubernetes cluster             │
    │                                                          │
    │ Please give us feedback at:                              │
    │ https://github.com/kubernetes/kubeadm/issues             │
    └──────────────────────────────────────────────────────────┘

Example usage:

    Create a two-machine cluster with one control-plane node
    (which controls the cluster), and one worker node
    (where your workloads, like Pods and Deployments run).

    ┌──────────────────────────────────────────────────────────┐
    │ On the first machine:                                    │
    ├──────────────────────────────────────────────────────────┤
    │ control-plane# kubeadm init                              │
    └──────────────────────────────────────────────────────────┘

    ┌──────────────────────────────────────────────────────────┐
    │ On the second machine:                                   │
    ├──────────────────────────────────────────────────────────┤
    │ worker# kubeadm join <arguments-returned-from-init>      │
    └──────────────────────────────────────────────────────────┘

    You can then repeat the second step on as many other machines as you like.

Usage:
  kubeadm [command]

Available Commands:
  certs       Commands related to handling kubernetes certificates
  completion  Output shell completion code for the specified shell (bash or zsh)
  config      Manage configuration for a kubeadm cluster persisted in a ConfigMap in the cluster
  help        Help about any command
  init        Run this command in order to set up the Kubernetes control plane
  join        Run this on any machine you wish to join an existing cluster
  kubeconfig  Kubeconfig file utilities
  reset       Performs a best effort revert of changes made to this host by 'kubeadm init' or 'kubeadm join'
  token       Manage bootstrap tokens
  upgrade     Upgrade your cluster smoothly to a newer version with this command
  version     Print the version of kubeadm

Flags:
      --add-dir-header           If true, adds the file directory to the header of the log messages
  -h, --help                     help for kubeadm
      --log-file string          If non-empty, use this log file
      --log-file-max-size uint   Defines the maximum size a log file can grow to. Unit is megabytes. If the value is 0, the maximum file size is unlimited.

~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
"kubeadm-config.yaml" [New]                                                                                                               0,0-1         All
kind: ClusterConfiguration
(default 1800)
      --one-output               If true, only write logs to their native severity level (vs also writing to each lower severity level)
      --rootfs string            [EXPERIMENTAL] The path to the 'real' host root filesystem.
      --skip-headers             If true, avoid header prefixes in the log messages
kind: ClusterConfiguration
apiVersion: kubeadm.k8s.io/v1beta3
kubernetesVersion: v1.21.0
---
kind: KubeletConfiguration
apiVersion: kubelet.config.k8s.io/v1beta1
cgroupDriver: systemd
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
"./kubeadm-config.yaml" 7L, 184B                                                                                                          7,21          All
kind: ClusterConfiguration
      --skip-log-headers         If true, avoid headers when opening log files
  -v, --v Level                  number for the log level verbosity

Additional help topics:
  kubeadm alpha      Kubeadm experimental sub-commands

Use "kubeadm [command] --help" for more information about a command.
felixmsa@ikt210-g-22h-lab-group-13-node1:~$ kubectl --version
error: unknown flag: --version
See 'kubectl --help' for usage.
felixmsa@ikt210-g-22h-lab-group-13-node1:~$ kubectl -v
error: flag needs an argument: 'v' in -v
See 'kubectl --help' for usage.
felixmsa@ikt210-g-22h-lab-group-13-node1:~$ kubeadm -v
flag needs an argument: 'v' in -v
To see the stack trace of this error execute with --v=5 or higher
felixmsa@ikt210-g-22h-lab-group-13-node1:~$ kubeadm --version
unknown flag: --version
To see the stack trace of this error execute with --v=5 or higher
felixmsa@ikt210-g-22h-lab-group-13-node1:~$ vim kubeadm-config.yaml
felixmsa@ikt210-g-22h-lab-group-13-node1:~$ kubeadm init --config kubeadm-config.yaml
this version of kubeadm only supports deploying clusters with the control plane version >= 1.23.0. Current version: v1.21.0
To see the stack trace of this error execute with --v=5 or higher
felixmsa@ikt210-g-22h-lab-group-13-node1:~$ vim ./kubeadm-config.yaml
felixmsa@ikt210-g-22h-lab-group-13-node1:~$ kubeadm init --config kubeadm-config.yaml
[init] Using Kubernetes version: v1.25.0
[preflight] Running pre-flight checks
error execution phase preflight: [preflight] Some fatal errors occurred:
	[ERROR IsPrivilegedUser]: user is not running as root
kind: ClusterConfiguration
apiVersion: kubeadm.k8s.io/v1beta3
kubernetesVersion: v1.25.0
---
kind: KubeletConfiguration
apiVersion: kubelet.config.k8s.io/v1beta1
cgroupDriver: systemd
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
"./kubeadm-config.yaml" 7L, 184B                                                                                                          3,24          All
kind: ClusterConfiguration
[preflight] If you know what you are doing, you can make a check non-fatal with `--ignore-preflight-errors=...`
To see the stack trace of this error execute with --v=5 or higher
felixmsa@ikt210-g-22h-lab-group-13-node1:~$ sudo kubeadm init --config kubeadm-config.yaml
[init] Using Kubernetes version: v1.25.0
[preflight] Running pre-flight checks
W0830 09:19:48.175798   14668 checks.go:1021] [preflight] WARNING: Couldn't create the interface used for talking to the container runtime: crictl is required by the container runtime: exec: "crictl": executable file not found in $PATH
	[WARNING KubernetesVersion]: Kubernetes version is greater than kubeadm version. Please consider to upgrade kubeadm. Kubernetes version: 1.25.0. Kubeadm version: 1.24.x
	[WARNING FileExisting-socat]: socat not found in system path
	[WARNING SystemVerification]: missing optional cgroups: blkio
	[WARNING Service-Kubelet]: kubelet service is not enabled, please run 'systemctl enable kubelet.service'
error execution phase preflight: [preflight] Some fatal errors occurred:
	[ERROR FileContent--proc-sys-net-bridge-bridge-nf-call-iptables]: /proc/sys/net/bridge/bridge-nf-call-iptables does not exist
	[ERROR FileContent--proc-sys-net-ipv4-ip_forward]: /proc/sys/net/ipv4/ip_forward contents are not set to 1
	[ERROR FileExisting-crictl]: crictl not found in system path
	[ERROR FileExisting-conntrack]: conntrack not found in system path
[preflight] If you know what you are doing, you can make a check non-fatal with `--ignore-preflight-errors=...`
To see the stack trace of this error execute with --v=5 or higher
felixmsa@ikt210-g-22h-lab-group-13-node1:~$ crictl
Command 'crictl' not found, did you mean:
  command 'critcl' from deb critcl (3.1.18.1+dfsg-3)
Try: apt install <deb name>
felixmsa@ikt210-g-22h-lab-group-13-node1:~$ vim ./kubeadm-config.yaml
felixmsa@ikt210-g-22h-lab-group-13-node1:~$ sudo kubeadm init --config kubeadm-config.yaml
[init] Using Kubernetes version: v1.24.0
[preflight] Running pre-flight checks
W0830 09:20:33.594476   14748 checks.go:1021] [preflight] WARNING: Couldn't create the interface used for talking to the container runtime: crictl is required by the container runtime: exec: "crictl": executable file not found in $PATH
	[WARNING FileExisting-socat]: socat not found in system path
	[WARNING SystemVerification]: missing optional cgroups: blkio
	[WARNING Service-Kubelet]: kubelet service is not enabled, please run 'systemctl enable kubelet.service'
error execution phase preflight: [preflight] Some fatal errors occurred:
	[ERROR FileContent--proc-sys-net-bridge-bridge-nf-call-iptables]: /proc/sys/net/bridge/bridge-nf-call-iptables does not exist
	[ERROR FileContent--proc-sys-net-ipv4-ip_forward]: /proc/sys/net/ipv4/ip_forward contents are not set to 1
	[ERROR FileExisting-crictl]: crictl not found in system path
	[ERROR FileExisting-conntrack]: conntrack not found in system path
[preflight] If you know what you are doing, you can make a check non-fatal with `--ignore-preflight-errors=...`
To see the stack trace of this error execute with --v=5 or higher
felixmsa@ikt210-g-22h-lab-group-13-node1:~$ systemd
disabled_plugins = []
imports = []
oom_score = 0
plugin_dir = ""
required_plugins = []
root = "/var/lib/containerd"
state = "/run/containerd"
version = 2

[cgroup]
  path = ""

[debug]
  address = ""
  format = ""
  gid = 0
  level = ""
  uid = 0

[grpc]
  address = "/run/containerd/containerd.sock"
  gid = 0
  max_recv_message_size = 16777216
  max_send_message_size = 16777216
"/etc/containerd/config.toml" 216L, 6069B                                                                                                 1,1           Top
disabled_plugins = []
imports = []
oom_score = 0
plugin_dir = ""
required_plugins = []
root = "/var/lib/containerd"
state = "/run/containerd"
version = 2

[cgroup]
  path = ""

[debug]
  address = ""
  format = ""
  gid = 0
  level = ""
  uid = 0

[grpc]
  address = "/run/containerd/containerd.sock"
  gid = 0
  max_recv_message_size = 16777216
  max_send_message_size = 16777216
  tcp_address = ""
  tcp_tls_cert = ""
  tcp_tls_key = ""
  uid = 0

[metrics]
  address = ""
  grpc_histogram = false

[plugins]

  [plugins."io.containerd.gc.v1.scheduler"]
    deletion_threshold = 0
    mutation_threshold = 100
    pause_threshold = 0.02
    schedule_delay = "0s"
    startup_delay = "100ms"

  [plugins."io.containerd.grpc.v1.cri"]
    disable_apparmor = false
    disable_cgroup = false
    disable_hugetlb_controller = true
    disable_proc_mount = false
    disable_tcp_service = true
    enable_selinux = false
    enable_tls_streaming = false
    ignore_image_defined_volumes = false
    max_concurrent_downloads = 3
    max_container_log_line_size = 16384
    netns_mounts_under_state_dir = false
    restrict_oom_score_adj = false
    sandbox_image = "k8s.gcr.io/pause:3.5"
    selinux_category_range = 1024
    stats_collect_period = 10
    stream_idle_timeout = "4h0m0s"
    stream_server_address = "127.0.0.1"
    stream_server_port = "0"
    systemd_cgroup = false
    tolerate_missing_hugetlb_controller = true
    unset_seccomp_profile = ""

    [plugins."io.containerd.grpc.v1.cri".cni]
      bin_dir = "/opt/cni/bin"
      conf_dir = "/etc/cni/net.d"
      conf_template = ""
      max_conf_num = 1

    [plugins."io.containerd.grpc.v1.cri".containerd]
      default_runtime_name = "runc"
      disable_snapshot_annotations = true
      discard_unpacked_layers = false
      no_pivot = false
      snapshotter = "overlayfs"

      [plugins."io.containerd.grpc.v1.cri".containerd.default_runtime]
        base_runtime_spec = ""
        container_annotations = []
        pod_annotations = []
        privileged_without_host_devices = false
        runtime_engine = ""
        runtime_root = ""
        runtime_type = ""

        [plugins."io.containerd.grpc.v1.cri".containerd.default_runtime.options]

      [plugins."io.containerd.grpc.v1.cri".containerd.runtimes]

        [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc]
          base_runtime_spec = ""
          container_annotations = []
          pod_annotations = []
          privileged_without_host_devices = false
          runtime_engine = ""
          runtime_root = ""
          runtime_type = "io.containerd.runc.v2"

          [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc.options]
            BinaryName = ""
            CriuImagePath = ""
            CriuPath = ""
            CriuWorkPath = ""
            IoGid = 0
            IoUid = 0
            NoNewKeyring = false
            NoPivotRoot = false
            Root = ""
            ShimCgroup = ""
            SystemdCgroup = false

      [plugins."io.containerd.grpc.v1.cri".containerd.untrusted_workload_runtime]
        base_runtime_spec = ""
        container_annotations = []
        pod_annotations = []
        privileged_without_host_devices = false
        runtime_engine = ""
        runtime_root = ""
        runtime_type = ""

        [plugins."io.containerd.grpc.v1.cri".containerd.untrusted_workload_runtime.options]

    [plugins."io.containerd.grpc.v1.cri".image_decryption]
      key_model = "node"

    [plugins."io.containerd.grpc.v1.cri".registry]
      config_path = ""

      [plugins."io.containerd.grpc.v1.cri".registry.auths]

      [plugins."io.containerd.grpc.v1.cri".registry.configs]

      [plugins."io.containerd.grpc.v1.cri".registry.headers]

      [plugins."io.containerd.grpc.v1.cri".registry.mirrors]

    [plugins."io.containerd.grpc.v1.cri".x509_key_pair_streaming]
      tls_cert_file = ""
      tls_key_file = ""

  [plugins."io.containerd.internal.v1.opt"]
    path = "/opt/containerd"

  [plugins."io.containerd.internal.v1.restart"]
    interval = "10s"

  [plugins."io.containerd.metadata.v1.bolt"]
    content_sharing_policy = "shared"

  [plugins."io.containerd.monitor.v1.cgroups"]
    no_prometheus = false

  [plugins."io.containerd.runtime.v1.linux"]
    no_shim = false
    runtime = "runc"
    runtime_root = ""
    shim = "containerd-shim"
    shim_debug = false

  [plugins."io.containerd.runtime.v2.task"]
    platforms = ["linux/amd64"]

  [plugins."io.containerd.service.v1.diff-service"]
    default = ["walking"]

  [plugins."io.containerd.snapshotter.v1.aufs"]
    root_path = ""

  [plugins."io.containerd.snapshotter.v1.btrfs"]
    root_path = ""

  [plugins."io.containerd.snapshotter.v1.devmapper"]
    async_remove = false
    base_image_size = ""
    pool_name = ""
    root_path = ""

  [plugins."io.containerd.snapshotter.v1.native"]
    root_path = ""

  [plugins."io.containerd.snapshotter.v1.overlayfs"]
    root_path = ""

  [plugins."io.containerd.snapshotter.v1.zfs"]
    root_path = ""

[proxy_plugins]

[stream_processors]

Explicit --user argument required to run as user manager.
felixmsa@ikt210-g-22h-lab-group-13-node1:~$ cgroupfs

~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
"/etc/containerd/config.toml" [New]                                                                                                       0,0-1         All
  attach          Attach to a running container
  exec            Execute a command in a container
  port-forward    Forward one or more local ports to a pod
  proxy           Run a proxy to the Kubernetes API server
  diff            Diff the live version against a would-be applied version
  apply           Apply a configuration to a resource by file name or stdin
  patch           Update fields of a resource
  completion      Output shell completion code for the specified shell (bash, zsh or fish)

  config          Modify kubeconfig files

Usage:
  kubectl [flags] [options]

Use "kubectl <command> --help" for more information about a given command.
Use "kubectl options" for a list of global command-line options (applies to all commands).
felixmsa@ikt210-g-22h-lab-group-13-node1:~$ kubeadm
Command 'kubeadm' not found, but can be installed with:
snap install kubeadm
Please ask your administrator.
felixmsa@ikt210-g-22h-lab-group-13-node1:~$ sudo snap install kubeadm --classic
kubeadm 1.24.4 from Canonical✓ installed
felixmsa@ikt210-g-22h-lab-group-13-node1:~$ sudo snap install kubelet --classic
Error: failed to construct kubelet dependencies: error reading /var/lib/kubelet/pki/kubelet.key, certificate and key must be supplied as a pair

Flags:
      --azure-container-registry-config string                   Path to the file containing Azure container registry configuration information.
      --exit-on-lock-contention                                  Whether kubelet should exit upon lock-file contention.
                APIListChunking=true|false (BETA - default=true)
                APIPriorityAndFairness=true|false (BETA - default=true)
                APIResponseCompression=true|false (BETA - default=true)
                APIServerIdentity=true|false (ALPHA - default=false)
                APIServerTracing=true|false (ALPHA - default=false)
                AllAlpha=true|false (ALPHA - default=false)
                AllBeta=true|false (BETA - default=false)
                AnyVolumeDataSource=true|false (BETA - default=true)
                AppArmor=true|false (BETA - default=true)
                CPUManager=true|false (BETA - default=true)
                CPUManagerPolicyAlphaOptions=true|false (ALPHA - default=false)
                CPUManagerPolicyBetaOptions=true|false (BETA - default=true)
                CPUManagerPolicyOptions=true|false (BETA - default=true)
                CSIInlineVolume=true|false (BETA - default=true)
                CSIMigration=true|false (BETA - default=true)
                CSIMigrationAWS=true|false (BETA - default=true)
                CSIMigrationAzureFile=true|false (BETA - default=true)
                CSIMigrationGCE=true|false (BETA - default=true)
                CSIMigrationPortworx=true|false (ALPHA - default=false)
                CSIMigrationRBD=true|false (ALPHA - default=false)
                CSIMigrationvSphere=true|false (BETA - default=false)
                CSIVolumeHealth=true|false (ALPHA - default=false)
                ContextualLogging=true|false (ALPHA - default=false)
                CronJobTimeZone=true|false (ALPHA - default=false)
                CustomCPUCFSQuotaPeriod=true|false (ALPHA - default=false)
                CustomResourceValidationExpressions=true|false (ALPHA - default=false)
                DaemonSetUpdateSurge=true|false (BETA - default=true)
                DelegateFSGroupToCSIDriver=true|false (BETA - default=true)
                DevicePlugins=true|false (BETA - default=true)
                DisableAcceleratorUsageMetrics=true|false (BETA - default=true)
                DisableCloudProviders=true|false (ALPHA - default=false)
                DisableKubeletCloudCredentialProviders=true|false (ALPHA - default=false)
                DownwardAPIHugePages=true|false (BETA - default=true)
                EndpointSliceTerminatingCondition=true|false (BETA - default=true)
                EphemeralContainers=true|false (BETA - default=true)
                ExpandedDNSConfig=true|false (ALPHA - default=false)
                ExperimentalHostUserNamespaceDefaulting=true|false (BETA - default=false)
                GRPCContainerProbe=true|false (BETA - default=true)
                GracefulNodeShutdown=true|false (BETA - default=true)
                GracefulNodeShutdownBasedOnPodPriority=true|false (BETA - default=true)
                HPAContainerMetrics=true|false (ALPHA - default=false)
                HPAScaleToZero=true|false (ALPHA - default=false)
                HonorPVReclaimPolicy=true|false (ALPHA - default=false)
                IdentifyPodOS=true|false (BETA - default=true)
                InTreePluginAWSUnregister=true|false (ALPHA - default=false)
                InTreePluginAzureDiskUnregister=true|false (ALPHA - default=false)
                InTreePluginAzureFileUnregister=true|false (ALPHA - default=false)
                InTreePluginGCEUnregister=true|false (ALPHA - default=false)
                InTreePluginOpenStackUnregister=true|false (ALPHA - default=false)
                InTreePluginPortworxUnregister=true|false (ALPHA - default=false)
                InTreePluginRBDUnregister=true|false (ALPHA - default=false)
                InTreePluginvSphereUnregister=true|false (ALPHA - default=false)
                JobMutableNodeSchedulingDirectives=true|false (BETA - default=true)
                JobReadyPods=true|false (BETA - default=true)
                JobTrackingWithFinalizers=true|false (BETA - default=false)
                KubeletCredentialProviders=true|false (BETA - default=true)
                KubeletInUserNamespace=true|false (ALPHA - default=false)
                KubeletPodResources=true|false (BETA - default=true)
                KubeletPodResourcesGetAllocatable=true|false (BETA - default=true)
                LegacyServiceAccountTokenNoAutoGeneration=true|false (BETA - default=true)
                LocalStorageCapacityIsolation=true|false (BETA - default=true)
                LocalStorageCapacityIsolationFSQuotaMonitoring=true|false (ALPHA - default=false)
                LogarithmicScaleDown=true|false (BETA - default=true)
                MaxUnavailableStatefulSet=true|false (ALPHA - default=false)
                MemoryManager=true|false (BETA - default=true)
                MemoryQoS=true|false (ALPHA - default=false)
                MinDomainsInPodTopologySpread=true|false (ALPHA - default=false)
                MixedProtocolLBService=true|false (BETA - default=true)
                NetworkPolicyEndPort=true|false (BETA - default=true)
                NetworkPolicyStatus=true|false (ALPHA - default=false)
                NodeOutOfServiceVolumeDetach=true|false (ALPHA - default=false)
                NodeSwap=true|false (ALPHA - default=false)
                OpenAPIEnums=true|false (BETA - default=true)
                OpenAPIV3=true|false (BETA - default=true)
                PodAndContainerStatsFromCRI=true|false (ALPHA - default=false)
                PodDeletionCost=true|false (BETA - default=true)
                PodSecurity=true|false (BETA - default=true)
                ProbeTerminationGracePeriod=true|false (BETA - default=false)
                ProcMountType=true|false (ALPHA - default=false)
                ReadWriteOncePod=true|false (ALPHA - default=false)
                RecoverVolumeExpansionFailure=true|false (ALPHA - default=false)
                RemainingItemCount=true|false (BETA - default=true)
                RotateKubeletServerCertificate=true|false (BETA - default=true)
                SeccompDefault=true|false (ALPHA - default=false)
                ServerSideFieldValidation=true|false (ALPHA - default=false)
                ServiceIPStaticSubrange=true|false (ALPHA - default=false)
                ServiceInternalTrafficPolicy=true|false (BETA - default=true)
                SizeMemoryBackedVolumes=true|false (BETA - default=true)
                StatefulSetAutoDeletePVC=true|false (ALPHA - default=false)
                StorageVersionHash=true|false (BETA - default=true)
                TopologyAwareHints=true|false (BETA - default=true)
                WinDSR=true|false (ALPHA - default=false)
                WinOverlay=true|false (BETA - default=true)
  -h, --help                                                     help for kubelet
      --housekeeping-interval duration                           Interval between container housekeepings (default 10s)
      --image-credential-provider-bin-dir string                 The path to the directory where credential provider plugin binaries are located.
      --image-credential-provider-config string                  The path to the credential provider plugin config file.
      --lock-file string                                         <Warning: Alpha feature> The path to file for kubelet to use as a lock file.
      --logging-format string                                    Sets the log format. Permitted formats: "json", "text".
      --root-dir string                                          Directory path for managing kubelet files (volume mounts,etc). (default "/var/lib/kubelet")
      --runtime-cgroups string                                   Optional absolute name of cgroups to create and run the runtime in.
  -v, --v Level                                                  number for the log level verbosity
felixmsa@ikt210-g-22h-lab-group-13-node1:~$ kubectl
kubectl controls the Kubernetes cluster manager.

Basic Commands (Beginner):
  run             Run a particular image on the cluster
  set             Set specific features on objects

  get             Display one or many resources
  edit            Edit a resource on the server
  delete          Delete resources by file names, stdin, resources and names, or by resources and label selector

  scale           Set a new size for a deployment, replica set, or replication controller
  autoscale       Auto-scale a deployment, replica set, stateful set, or replication controller

Cluster Management Commands:
  certificate     Modify certificate resources.
  cluster-info    Display cluster information
  drain           Drain node in preparation for maintenance
  taint           Update the taints on one or more nodes
  logs            Print the logs for a container in a pod
  attach          Attach to a running container
  exec            Execute a command in a container
  port-forward    Forward one or more local ports to a pod
  proxy           Run a proxy to the Kubernetes API server
  diff            Diff the live version against a would-be applied version
  apply           Apply a configuration to a resource by file name or stdin
  kustomize       Build a kustomization target from a directory or URL.

Settings Commands:
  label           Update the labels on a resource
  annotate        Update the annotations on a resource
  completion      Output shell completion code for the specified shell (bash, zsh or fish)
  config          Modify kubeconfig files

Usage:
  kubectl [flags] [options]

felixmsa@ikt210-g-22h-lab-group-13-node1:~$ kubeadm


    ┌──────────────────────────────────────────────────────────┐

    Create a two-machine cluster with one control-plane node
    (which controls the cluster), and one worker node
    (where your workloads, like Pods and Deployments run).

    ┌──────────────────────────────────────────────────────────┐
    │ On the first machine:                                    │
    └──────────────────────────────────────────────────────────┘
    ├──────────────────────────────────────────────────────────┤
    │ worker# kubeadm join <arguments-returned-from-init>      │
    └──────────────────────────────────────────────────────────┘
~
~
~
~
---
~
~
~
~
~
~
~
"./kubeadm-config.yaml" 7L, 184B                                                                                                          7,21          All
kind: ClusterConfiguration
      --skip-log-headers         If true, avoid headers when opening log files
  -v, --v Level                  number for the log level verbosity
  kubeadm alpha      Kubeadm experimental sub-commands

apiVersion: kubeadm.k8s.io/v1beta3
kubernetesVersion: v1.25.0
---
kind: KubeletConfiguration
~
~
~
~
~
~
~
~
~
~
~
~
~
"./kubeadm-config.yaml" 7L, 184B                                                                                                          3,24          All
kind: ClusterConfiguration
[preflight] If you know what you are doing, you can make a check non-fatal with `--ignore-preflight-errors=...`
To see the stack trace of this error execute with --v=5 or higher
felixmsa@ikt210-g-22h-lab-group-13-node1:~$ sudo kubeadm init --config kubeadm-config.yaml
[init] Using Kubernetes version: v1.25.0
[preflight] Running pre-flight checks
cgroupfs: command not found
felixmsa@ikt210-g-22h-lab-group-13-node1:~$ cd /etc/c
disabled_plugins = []
imports = []
oom_score = 0
plugin_dir = ""
required_plugins = []
root = "/var/lib/containerd"
state = "/run/containerd"
version = 2

[cgroup]
  path = ""

[debug]
  address = ""
  format = ""
  gid = 0
  level = ""
  uid = 0

[grpc]
  address = "/run/containerd/containerd.sock"
  gid = 0
  max_recv_message_size = 16777216
  max_send_message_size = 16777216
"/etc/containerd/config.toml" 216L, 6069B                                                                                                 1,1           Top
disabled_plugins = []
imports = []
oom_score = 0
plugin_dir = ""
required_plugins = []
root = "/var/lib/containerd"
state = "/run/containerd"
version = 2

[cgroup]
  path = ""

[debug]
  address = ""
  format = ""
  gid = 0
  level = ""
  uid = 0

[grpc]
  address = "/run/containerd/containerd.sock"
  gid = 0
  max_recv_message_size = 16777216
  max_send_message_size = 16777216
  tcp_address = ""
  tcp_tls_cert = ""
  tcp_tls_key = ""
  uid = 0

[metrics]
  address = ""
  grpc_histogram = false

[plugins]

  [plugins."io.containerd.gc.v1.scheduler"]
    deletion_threshold = 0
    mutation_threshold = 100
    pause_threshold = 0.02
    schedule_delay = "0s"
    startup_delay = "100ms"

  [plugins."io.containerd.grpc.v1.cri"]
    disable_apparmor = false
    disable_cgroup = false
    disable_hugetlb_controller = true
    disable_proc_mount = false
    disable_tcp_service = true
    enable_selinux = false
    enable_tls_streaming = false
    ignore_image_defined_volumes = false
    max_concurrent_downloads = 3
    max_container_log_line_size = 16384
    netns_mounts_under_state_dir = false
    restrict_oom_score_adj = false
    sandbox_image = "k8s.gcr.io/pause:3.5"
    selinux_category_range = 1024
    stats_collect_period = 10
    stream_idle_timeout = "4h0m0s"
    stream_server_address = "127.0.0.1"
    stream_server_port = "0"
    systemd_cgroup = false
    tolerate_missing_hugetlb_controller = true
    unset_seccomp_profile = ""

    [plugins."io.containerd.grpc.v1.cri".cni]
      bin_dir = "/opt/cni/bin"
      conf_dir = "/etc/cni/net.d"
      conf_template = ""
      max_conf_num = 1

    [plugins."io.containerd.grpc.v1.cri".containerd]
      default_runtime_name = "runc"
      disable_snapshot_annotations = true
      discard_unpacked_layers = false
      no_pivot = false
      snapshotter = "overlayfs"

      [plugins."io.containerd.grpc.v1.cri".containerd.default_runtime]
        base_runtime_spec = ""
        container_annotations = []
        pod_annotations = []
        privileged_without_host_devices = false
        runtime_engine = ""
        runtime_root = ""
        runtime_type = ""

        [plugins."io.containerd.grpc.v1.cri".containerd.default_runtime.options]

      [plugins."io.containerd.grpc.v1.cri".containerd.runtimes]

        [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc]
          base_runtime_spec = ""
          container_annotations = []
          pod_annotations = []
          privileged_without_host_devices = false
          runtime_engine = ""
          runtime_root = ""
          runtime_type = "io.containerd.runc.v2"

          [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc.options]
            BinaryName = ""
            CriuImagePath = ""
            CriuPath = ""
            CriuWorkPath = ""
            IoGid = 0
            IoUid = 0
            NoNewKeyring = false
            NoPivotRoot = false
            Root = ""
            ShimCgroup = ""
            SystemdCgroup = false

      [plugins."io.containerd.grpc.v1.cri".containerd.untrusted_workload_runtime]
        base_runtime_spec = ""
        container_annotations = []
        pod_annotations = []
        privileged_without_host_devices = false
        runtime_engine = ""
        runtime_root = ""
        runtime_type = ""

        [plugins."io.containerd.grpc.v1.cri".containerd.untrusted_workload_runtime.options]

    [plugins."io.containerd.grpc.v1.cri".image_decryption]
      key_model = "node"

    [plugins."io.containerd.grpc.v1.cri".registry]
      config_path = ""

      [plugins."io.containerd.grpc.v1.cri".registry.auths]

      [plugins."io.containerd.grpc.v1.cri".registry.configs]

      [plugins."io.containerd.grpc.v1.cri".registry.headers]

      [plugins."io.containerd.grpc.v1.cri".registry.mirrors]

    [plugins."io.containerd.grpc.v1.cri".x509_key_pair_streaming]
      tls_cert_file = ""
      tls_key_file = ""

  [plugins."io.containerd.internal.v1.opt"]
    path = "/opt/containerd"

  [plugins."io.containerd.internal.v1.restart"]
    interval = "10s"

  [plugins."io.containerd.metadata.v1.bolt"]
    content_sharing_policy = "shared"

  [plugins."io.containerd.monitor.v1.cgroups"]
    no_prometheus = false

  [plugins."io.containerd.runtime.v1.linux"]
    no_shim = false
    runtime = "runc"
    runtime_root = ""
    shim = "containerd-shim"
    shim_debug = false

  [plugins."io.containerd.runtime.v2.task"]
    platforms = ["linux/amd64"]

  [plugins."io.containerd.service.v1.diff-service"]
    default = ["walking"]

  [plugins."io.containerd.snapshotter.v1.aufs"]
    root_path = ""

  [plugins."io.containerd.snapshotter.v1.btrfs"]
    root_path = ""

  [plugins."io.containerd.snapshotter.v1.devmapper"]
    async_remove = false
    base_image_size = ""
    pool_name = ""
    root_path = ""

  [plugins."io.containerd.snapshotter.v1.native"]
    root_path = ""

  [plugins."io.containerd.snapshotter.v1.overlayfs"]
    root_path = ""

  [plugins."io.containerd.snapshotter.v1.zfs"]
    root_path = ""

[proxy_plugins]

[stream_processors]


  [plugins."io.containerd.snapshotter.v1.overlayfs"]
    root_path = ""

  [plugins."io.containerd.snapshotter.v1.zfs"]
    root_path = ""

[proxy_plugins]

[stream_processors]

  [stream_processors."io.containerd.ocicrypt.decoder.v1.tar"]
    accepts = ["application/vnd.oci.image.layer.v1.tar+encrypted"]
    args = ["--decryption-keys-path", "/etc/containerd/ocicrypt/keys"]
    env = ["OCICRYPT_KEYPROVIDER_CONFIG=/etc/containerd/ocicrypt/ocicrypt_keyprovider.conf"]
    path = "ctd-decoder"
    returns = "application/vnd.oci.image.layer.v1.tar"

  [stream_processors."io.containerd.ocicrypt.decoder.v1.tar.gzip"]
    accepts = ["application/vnd.oci.image.layer.v1.tar+gzip+encrypted"]
    args = ["--decryption-keys-path", "/etc/containerd/ocicrypt/keys"]
    env = ["OCICRYPT_KEYPROVIDER_CONFIG=/etc/containerd/ocicrypt/ocicrypt_keyprovider.conf"]
    path = "ctd-decoder"
    returns = "application/vnd.oci.image.layer.v1.tar+gzip"

[timeouts]
  "io.containerd.timeout.shim.cleanup" = "5s"
  "io.containerd.timeout.shim.load" = "5s"
  "io.containerd.timeout.shim.shutdown" = "3s"
  "io.containerd.timeout.task.state" = "2s"

[ttrpc]
  address = ""
  gid = 0
  uid = 0
                                                                                                                                          216,1         Bot